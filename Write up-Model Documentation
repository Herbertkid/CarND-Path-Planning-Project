Write up-Model Documentation

# CarND-Path-Planning-Project
Self-Driving Car Engineer Nanodegree Program

## The goal of this project are the following:
In this project your goal is to safely navigate around a virtual highway with other traffic that is driving +-10 MPH of the 50 MPH speed limit. You will be provided the car's localization and sensor fusion data, there is also a sparse map list of waypoints around the highway. The car should try to go as close as possible to the 50 MPH speed limit, which means passing slower traffic when possible, note that other cars will try to change lanes too. The car should avoid hitting other cars at all cost as well as driving inside of the marked road lanes at all times, unless going from one lane to another. The car should be able to make one complete loop around the 6946m highway. Since the car is trying to go 50 MPH, it should take a little over 5 minutes to complete 1 loop. Also the car should not experience total acceleration over 10 m/s^2 and jerk that is greater than 10 m/s^3.


## code description

### The steps taken to achieve all the above acceptance critieria:

#### First,locate the car's location and use sensor fusion data to other cars state and prevent collitions. By  

`
					if (event == "telemetry") {
                      // j[1] is the data JSON object

                      // Main car's localization Data
                      double car_x = j[1]["x"];
                      double car_y = j[1]["y"];
                      double car_s = j[1]["s"];
                      double car_d = j[1]["d"];
                      double car_yaw = j[1]["yaw"];
                      double car_speed = j[1]["speed"];

                      // Previous path data given to the Planner
                      auto previous_path_x = j[1]["previous_path_x"];
                      auto previous_path_y = j[1]["previous_path_y"];
                      // Previous path's end s and d values
                      double end_path_s = j[1]["end_path_s"];
                      double end_path_d = j[1]["end_path_d"];

                      // Sensor Fusion Data, a list of all other cars on the same side of the road.
                      auto sensor_fusion = j[1]["sensor_fusion"];

                      // Provided previous path point size.
                      int prev_size = previous_path_x.size();

                      // Preventing collitions.
                      if (prev_size > 0) {
                        car_s = end_path_s;
                      }

                      //set car conditions
                      bool too_close = false;
                      bool go_left = false;
                      bool go_right = false;

                      for ( int i = 0; i < sensor_fusion.size(); i++ ) 
                      {
                        float d = sensor_fusion[i][6];
                        int car_lane= -1;
                        // judge which lane now
                        if ( d > 0 && d < 4 ) {
                          car_lane = 0;
                        } else if ( d > 4 && d < 8 ) {
                          car_lane = 1;
                        } else if ( d > 8 && d < 12 ) {
                          car_lane = 2;
                        }
                        if (car_lane < 0) {
                          continue;
                        }
`
#### Second check other car's speed and position to change lane. 
`
					// check the speed of other cars
                        double vx = sensor_fusion[i][3];
                        double vy = sensor_fusion[i][4];
                        double check_car_speed = sqrt(vx*vx + vy*vy);
                        double  check_car_s = sensor_fusion[i][5];
                        // set the region for movement
                        double dr = 28.0;
                        double offset = 15.0;

                        // predict other car's future position, 0.02 timestep
                        check_car_s += ((double)prev_size * 0.02 * check_car_speed);

                        // check if other car is in the danger region
                        if ( car_lane == lane ) {
                          too_close |= check_car_s > car_s && check_car_s - car_s <= dr;
                        } else if ( car_lane - lane == -1 ) {
                          go_left |= car_s - dr + offset <= check_car_s && car_s + dr >= check_car_s;
                        } else if ( car_lane - lane == 1 ) {
                          go_right |= car_s - dr + offset <= check_car_s && car_s + dr >= check_car_s;
                        }
                      }

                      // Behavior limite.
                      double vel = 0.0;
                      const double MAX_VEL = 49.5;
                      const double MAX_ACC = .224;

                      if ( too_close ) {
                        // go left
                        if ( !go_left && lane > 0 ) {
                          lane = lane -1;
                        // go right.
                        } else if ( !go_right && lane != 2 ) {
                          lane = lane + 1;
                        } 
                        else {
                          vel = -MAX_ACC;
                        }
                      } 
                      else {
                        //always go middle
                        if ( lane != 1 ) {
                          if ( ( lane == 0 && !go_right) || ( lane == 2 && !go_left ) ) {
                            lane = 1; 
                          }
                        }
                        if ( ref_vel < MAX_VEL ) {
                          vel = MAX_ACC;
                        }
                      }
`
#### Third to have a smooth transition from previous path to new path that we take previous data points into account.
`
					// template vectors
                      vector<double> ptsx;
                      vector<double> ptsy;
                      vector<double> next_x_vals;
                      vector<double> next_y_vals;

                      // x, y, yaw states
                      double ref_x = car_x;
                      double ref_y = car_y;
                      double ref_yaw = deg2rad(car_yaw);

                      // if previous size is finish then use new as starting point
                      if ( prev_size < 4 ) {

                        double prev_car_x = car_x - cos(car_yaw);
                        double prev_car_y = car_y - sin(car_yaw);

                        ptsx.push_back(prev_car_x);
                        ptsx.push_back(car_x);

                        ptsy.push_back(prev_car_y);
                        ptsy.push_back(car_y);
                      } 
					  
					  else {
                         // use end points as start
                        ref_x = previous_path_x[prev_size - 1];
                        ref_y = previous_path_y[prev_size - 1];

                        double ref_x_prev = previous_path_x[prev_size - 2];
                        double ref_y_prev = previous_path_y[prev_size - 2];

                        
                        ref_yaw = atan2(ref_y - ref_y_prev, ref_x - ref_x_prev);

                       
                        ptsx.push_back(ref_x_prev);
                        ptsx.push_back(ref_x);

                        ptsy.push_back(ref_y_prev);
                        ptsy.push_back(ref_y);
                      }
`

#### Fourth the basic idea here is we need to create widely spaced points (x,y) waypoints far spaced, at around 30m, 60m and 90m. Then generate new pointsa and fill the spaces.
`
					// add 3 far points for fitting spline
                      vector<double> next_w0 = getXY(car_s + 30, 2 + 4*lane, map_waypoints_s, map_waypoints_x, map_waypoints_y);
                      vector<double> next_w1 = getXY(car_s + 60, 2 + 4*lane, map_waypoints_s, map_waypoints_x, map_waypoints_y);
                      vector<double> next_w2 = getXY(car_s + 90, 2 + 4*lane, map_waypoints_s, map_waypoints_x, map_waypoints_y);

                      // far point for fitting spline. 
                      ptsx.push_back(next_w0[0]);
                      ptsx.push_back(next_w1[0]);
                      ptsx.push_back(next_w2[0]);

                      ptsy.push_back(next_w0[1]);
                      ptsy.push_back(next_w1[1]);
                      ptsy.push_back(next_w2[1]);
`

#### Then Filling in the data point either by utilizing Spline tools library.

I use Spline tool library as it is much easier to use and doesn't require a lot of coding.


Before utilizing spline it is much easier to tranform the data points and work with ego car coordinates instead of global coordinates.

					// transform corrdinates to local car corrdinates.
                      for ( int i = 0; i < ptsx.size(); i++ ) {
                        double shift_x = ptsx[i] - ref_x;
                        double shift_y = ptsy[i] - ref_y;
                        ptsx[i] = shift_x * cos(0 - ref_yaw) - shift_y * sin(0 - ref_yaw);
                        ptsy[i] = shift_x * sin(0 - ref_yaw) + shift_y * cos(0 - ref_yaw);
                      }
`

#### create spline and translate the points
`

             // Create the spline.
                      tk::spline s;
                     
                      s.set_points(ptsx, ptsy);// fitting the points

                      for ( int i = 0; i < prev_size; i++ ) {
                        next_x_vals.push_back(previous_path_x[i]);
                        next_y_vals.push_back(previous_path_y[i]);
                      }

                      double target_x = 30.0;
                      double target_y = s(target_x);
                      double target_dist = sqrt(target_x*target_x + target_y*target_y);

                      double x_add_on = 0;
                      // limit the jerk
                      for( int i = 0; i <= 50 - prev_size; i++ ) {
                        ref_vel += vel;

                        if ( ref_vel >= MAX_VEL ) {
                          ref_vel = MAX_VEL - 0.1;
                        } else if ( ref_vel <= MAX_ACC ) {
                          ref_vel += MAX_ACC;
                        }

                        //generates 50 ponits
                        double N = target_dist/(0.02*ref_vel/2.24);//2.24 is distance between ref_point to target with the given velocity
                        double x_point = x_add_on + target_x/N;
                        double y_point = s(x_point);
                        double x_ref = x_point;
                        double y_ref = y_point;
                        x_add_on = x_point;
                        // rotate points
                        x_point = x_ref * cos(ref_yaw) - y_ref * sin(ref_yaw);
                        y_point = x_ref * sin(ref_yaw) + y_ref * cos(ref_yaw);
                        // translate points
                        x_point += ref_x;
                        y_point += ref_y;
                        next_x_vals.push_back(x_point);
                        next_y_vals.push_back(y_point);
                      }
`


Additional Information
My code was able to perform as expected, and the car was able to drive through the Highway without any issues.
No initial jerks or maximum acceleration issues


Maintaining Speed limit
![image2](./SIMG/2.jpg)

Left lane Change
![image2](./SIMG/3.jpg)

Right lane Change
![image2](./SIMG/4.jpg)